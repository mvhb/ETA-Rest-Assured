/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aulaRA;

import com.github.javafaker.Faker;
import io.restassured.http.ContentType;
import org.apache.http.HttpStatus;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import static io.restassured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;

public class AppTest {

    @BeforeClass public static void preCondition(){
        baseURI = "http://localhost";
        port = 3000;
    }

    @Test public void testGetUsuarios() {
        when()
                .get("/usuarios")
        .then()
                .statusCode(HttpStatus.SC_OK);
    }

    @Test public void testCadastrarProduto(){
        Faker faker = new Faker();
        String nome = faker.name().firstName();
        System.out.println("Nome gerado pelo faker: " + nome);
        String email = "mvhb0120@qa.com.br";
        //criar um usuário
        String usuarioId =
        given()
                .body("{\n" +
                        "  \"nome\": \"Marcos Vinicius\",\n" +
                        "  \"email\": \"" + email + "\",\n" +
                        "  \"password\": \"teste\",\n" +
                        "  \"administrador\": \"true\"\n" +
                        "}")
                .contentType(ContentType.JSON)
        .when()
                .post("/usuarios")
        .then().log().all()
                .statusCode(HttpStatus.SC_CREATED)
                .body("message", is("Cadastro realizado com sucesso"))
                .extract().path("_id");

        //fazer login com o usuário criado
        String usuarioToken =
        given()
                .body("{\n" +
                        "  \"email\": \"" + email + "\",\n" +
                        "  \"password\": \"teste\"\n" +
                        "}")
                .contentType(ContentType.JSON)
        .when()
                .post("/login")
        .then().log().all()
                .statusCode(HttpStatus.SC_OK)
                .body("message", is("Login realizado com sucesso"))
                .extract().path("authorization");

        //criar o produto
        String produtoId =
        given()
                .header("authorization", usuarioToken)
                .body("{\n" +
                        "  \"nome\": \"Razer Kraken Pro Max1\",\n" +
                        "  \"preco\": 470,\n" +
                        "  \"descricao\": \"Mouse\",\n" +
                        "  \"quantidade\": 381\n" +
                        "}")
                .contentType(ContentType.JSON).
        when()
                .post("/produtos")
        .then().log().all()
                .statusCode(HttpStatus.SC_CREATED)
                .body("message", is("Cadastro realizado com sucesso"))
                .extract().path("_id");

        //excluir o produto
        given()
                .pathParam("_id", produtoId)
                .header("authorization", usuarioToken)
        .when()
                .delete("/produtos/{_id}")
        .then()
                .statusCode(HttpStatus.SC_OK);

        //excluir usuario
        given()
                .pathParam("_id", usuarioId).
        when()
                .delete("/usuarios/{_id}")
        .then()
                .statusCode(HttpStatus.SC_OK);
    }
}
