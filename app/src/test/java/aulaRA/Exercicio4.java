/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aulaRA;

import com.github.javafaker.Faker;
import io.restassured.http.ContentType;
import org.apache.http.HttpStatus;
import org.junit.BeforeClass;
import org.junit.Test;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.is;

public class Exercicio4 {

    @BeforeClass public static void preCondition(){
        baseURI = "http://localhost";
        port = 3000;
    }

    @Test public void testExercicio4() {
        String email = "mvhb87@qa.com.br";
        String senha = "teste";

        //Criando um usuário
        String usuarioId =
        given()
                .body("{\n" +
                        "  \"nome\": \"Marcos Vinicius\",\n" +
                        "  \"email\": \"" + email + "\",\n" +
                        "  \"password\": \"" + senha + "\",\n" +
                        "  \"administrador\": \"true\"\n" +
                        "}")
                .contentType(ContentType.JSON)
        .when()
                .post("/usuarios")
        .then().log().all()
                .statusCode(HttpStatus.SC_CREATED)
                .body("message", is("Cadastro realizado com sucesso"))
                .extract().path("_id");

        //Fazendo login com o usuário criado
        String usuarioToken =
        given()
                .body("{\n" +
                        "  \"email\": \""+ email +"\",\n" +
                        "  \"password\": \""+ senha +"\"\n" +
                        "}")
                .contentType(ContentType.JSON)
        .when()
                .post("/login")
        .then().log().all()
                .statusCode(HttpStatus.SC_OK)
                .body("message", is("Login realizado com sucesso"))
                .extract().path("authorization");

        //Criando o produto
        String produtoId =
        given()
                .header("authorization", usuarioToken)
                .body("{\n" +
                        "  \"nome\": \"Razer Kraken Ultimate 87\",\n" +
                        "  \"preco\": 500,\n" +
                        "  \"descricao\": \"Headset\",\n" +
                        "  \"quantidade\": 259\n" +
                        "}")
                .contentType(ContentType.JSON)
        .when()
                .post("/produtos")
        .then().log().all()
                .statusCode(HttpStatus.SC_CREATED)
                .body("message", is("Cadastro realizado com sucesso"))
                .extract().path("_id");

        //Criando um carrinho
        given()
                .header("authorization", usuarioToken)
                .body("{\n" +
                        "  \"produtos\": [\n" +
                        "    {\n" +
                        "      \"idProduto\": \""+produtoId+"\",\n" +
                        "      \"quantidade\": 29\n" +
                        "    }\n" +
                        "  ]\n" +
                        "}")
                .contentType(ContentType.JSON)
        .when()
                .post("/carrinhos")
        .then().log().all()
                .statusCode(HttpStatus.SC_CREATED)
                .body("message", is("Cadastro realizado com sucesso"));

        //Validando que não é possível excluir usuário com carrinho vinculado
        given()
                .pathParam("_id", usuarioId)
        .when()
                .delete("/usuarios/{_id}")
        .then().log().all()
                .statusCode(HttpStatus.SC_BAD_REQUEST);

        //Excluindo carrinho
        given()
                .header("authorization", usuarioToken)
        .when()
                .delete("carrinhos/cancelar-compra")
        .then().log().all()
                .statusCode(HttpStatus.SC_OK);

        //Excluindo produto
        given()
                .pathParam("_id", produtoId)
                .header("authorization", usuarioToken)
        .when()
                .delete("/produtos/{_id}")
        .then().log().all()
                .statusCode(HttpStatus.SC_OK);

        //Excluindo o usuário sem carrinho
        given()
                .pathParam("_id", usuarioId)
        .when()
                .delete("/usuarios/{_id}")
        .then().log().all()
                .statusCode(HttpStatus.SC_OK);
    }
}
